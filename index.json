[{"authors":["admin"],"categories":null,"content":"I`m a researcher of computer vision and artificial intelligence at Juefx Technology Co., Ltd. My research interests include computer vision, machine learning, deep learning and mathematics. Both of my bachelor's and master's degree are in Mathematics, and I proficient in computer algorithm.\n[reapet for page aligning, in developing\u0026hellip;] I`m a researcher of computer vision and artificial intelligence at Juefx Technology Co., Ltd. My research interests include computer vision, machine learning, deep learning and mathematics. Both of my bachelor's and master's degree are in Mathematics, and I proficient in computer algorithm.\n","date":-62135596800,"expirydate":-62135596800,"kind":"taxonomy","lang":"en","lastmod":-62135596800,"objectID":"2525497d367e79493fd32b198b28f040","permalink":"https://shishuai.org/authors/admin/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/authors/admin/","section":"authors","summary":"I`m a researcher of computer vision and artificial intelligence at Juefx Technology Co., Ltd. My research interests include computer vision, machine learning, deep learning and mathematics. Both of my bachelor's and master's degree are in Mathematics, and I proficient in computer algorithm. [reapet for page aligning, in developing\u0026hellip;] I`m a researcher of computer vision and artificial intelligence at Juefx Technology Co., Ltd. My research interests include computer vision, machine learning,","tags":null,"title":"Shuai Shi | 史帅","type":"authors"},{"authors":["Shuai Shi"],"categories":[],"content":"Recently there are some advances on counting the number of min-cut in graphs.\nConsider we have an undirected graph $G=(V,E)$ of $n$ vertices, and there are positive cost $c:E\\to \\R^+$ on the edges. We define $c(F)=\\sum_{e\\in F}c(e)$, to be the cost (value) of $F\\subset E$.\nLet $\\mathcal{P}$ be a partition of $V$ where each partition class is non-empty. We define $E(\\mathcal{P})$ to be the set of edges with end points in two different partition classes. A set of edges $F$ is called a $k$-cut, if $F=E(\\mathcal{P})$ for some $\\mathcal{P}$ such that $|\\mathcal{P}|\\geq k$.\nWe stress that by this definition, a $k$-cut is a $k-1$-cut. A cut is a $2$-cut. A min-$k$-cut is a $k$-cut of minimum value (cost). We let $\\lambda_k$ to denote the value of the min-$k$-cut.\nIt is well known that the number of min-cuts in a graph is ${n\\choose 2} = O(n^2)$. [@KargerS96]\nIn the entire article, unless specifically stated, we assume $k$ is a fixed integer at least $2$, and $\\alpha$ is a fixed value at least $1$.\nWe can express the state alternatively.\nTheorem The number of cuts $F$ such that $c(F)\\leq \\lambda_2$ is $O(n^2)$.\nBounds related to scaling of the min-cut What happens when we want to know about the number of cuts with value at most $\\alpha \\lambda_2$?\nBy simply analyzing Karger's algorithm, one can obtain the following.\nTheorem The number of cuts $F$ such that $c(F)\\leq \\alpha \\lambda_2$ is $O(n^{2\\alpha})$.\nWith more careful analysis using tree packing, Karger obtained the following [@Karger00].\nTheorem The number of cuts $F$ such that $c(F)\\leq \\alpha \\lambda_2$ is $O(n^{\\floor{2\\alpha}})$.\nIndeed, we do have a lower bound of ${n \\choose \\floor{2\\alpha}}$. Just consider an unweighted cycle, where min-cut has value $2$. We can pick any $\\floor{2\\alpha}$ edges, which forms a cut of value at most $\\alpha$ times the min-cut.\nNote that we require $\\alpha$ to a fixed value. This is because there is a dependency on $\\alpha$ hidden inside the big $O$. Our lower bound is absolute and does not depending on $\\alpha$ being fixed. It be interesting to obtain a matching upper bound. Hence we can consider the problem with strict inequality.\n{.Conjecture #approxcutconjecture} The number of cuts $F$ such that $c(F)\u0026lt; \\alpha \\lambda_2$ is $O(n^{\\ceil{2\\alpha}-1})$.\nHenzinger and Williamson showed the conjecture true for all $\\alpha\\leq \\frac{3}{2}$ [@HenzingerW96].\nBounds related to min-$k$-cut There are multiple ways to obtain the following theorem. For example, directly generalize Karger's argument for cut counting.\nTheorem The number of cuts $F$ such that $c(F)\\leq \\lambda_k$ is $O(n^{2(k-1)})$.\nThere were many attempts, and people can only obtain lower bounds of the form ${n\\choose k}$. Again, a cycle would be an example of such lower bound. The min-$k$-cut has value $k$, and can be obtained by picking any $k$ edges. The gap is pretty large. Hence one would tempt to conjecture the following.\n{.Conjecture #kcutconjecture} The number of cuts $F$ such that $c(F)\\leq \\lambda_k$ is $O(n^k)$.\nRecently, Gupta, Lee and Li almost closes the gap [@GuptaLL19].\nTheorem The number of cuts $F$ such that $c(F)\\leq \\lambda_k$ is $\\hat{O}(n^k)$.\nHere $\\hat{O}$ hides a factor smaller than any $n^\\epsilon$. While closing the gap, they showed thhe following interesting theorem.\nTheorem The number of cuts $F$ such that $c(F)\\leq \\frac{(2-\\epsilon)\\lambda_k}{k}$ is $O(n)$.\nConjecture The number of cuts $F$ such that $c(F)\u0026lt; \\frac{2\\lambda_k}{k}$ is $O(n)$.\nNote this theorem is basically shows we can also obtain interesting results for $\\alpha = \\frac{2-\\epsilon}{k} \u0026lt; 1$.\nHow about approximate min-$k$-cuts? Chekuri, Quanrud and I extended the tree packing analysis of Karger, and obtained the following result for $k$-cuts [@ChekuriQX19].\nTheorem The number of cuts $F$ such that $c(F)\\leq \\alpha \\lambda_k$ is $O(n^{\\floor{\\alpha 2(k-1)}})$.\nCombining the [@kcutconjecture] and [@approxcutconjecture], we get a unified conjecture, even for $\\alpha\u0026lt;1$.\nConjecture The number of cuts $F$ such that $c(F)\u0026lt; \\alpha \\lambda_k$ is $O(n^{\\ceil{\\alpha k}-1})$.\nBounds on parametric cuts Now, let's consider parametric cuts. Consider we have $d$ weight functions $c_1,\\ldots,c_d:E\\to \\R_{\\geq 0}$. Define $c_\\mu(e) = \\sum_{i=1}^d \\mu_i c_i(e)$. We interested in knowing about cuts $F$ such that $c_\\mu(F)$ is bounded by $\\alpha \\lambda_{\\mu,k}$, where $\\lambda_{\\mu,k}$ is the min-$k$-cut value when the cost function is $c_\\mu$.\nKarger showed the following [@Karger16].\nHence, we would have the following conjecture.\nConjecture The number of cuts $F$ such that $c_\\mu(F)\u0026lt; \\alpha \\lambda_{\\mu,k}$ for some $\\mu\\in \\R_{\\geq 0}^d$ is $O(n^{\\ceil{\\alpha k}+d-2})$.\nNote, we might relax the requirement that all $c_i$ and $\\mu$ are non-negative. Aissi et. al. showed the following [@AissiMMQ15].\nTheorem The number of cuts $F$ such that $c_\\mu(F)\\leq \\lambda_{\\mu}$ for some $c_\\mu\\geq 0$ is $O(m^d n^2\\log^{d-1} n)$.\nThe following would be even stronger conjecture.\nConjecture The number of cuts $F$ such that $c_\\mu(F) \u0026lt; \\alpha \\lambda_{\\mu,k}$ for some $c_\\mu\\geq 0$ is $O(n^{\\ceil{\\alpha k}+d-2})$.\nProjected cut bounds Let $\\tau_e = \\min_{U:e\\in \\delta(U)}c(\\delta(U))$. Fung et. al. showed a projected generalization of the cut counting bound [@FungHHP19]. Let $E_\\lambda = \\set{ e | \\tau_e \\geq x }$.\nTheorem The number of sets of the form $F\\cap E_\\lambda$ where $F$ is a cut such that $c(F)\\leq \\alpha \\lambda$ is $O(n^{2\\alpha})$.\nIf we let $\\lambda$ be the min-cut value, this is precisely the approximate cut counting bound.\nWe can of course ask if all our theorem can be applied to projected cuts. We don't even know if it extends to $k$-cuts. However, we can expect the following ultimate conjecture.\nLet $\\tau_{\\mu,k,e}$ be the minimum over all $c_{\\mu}(F)$, where $F$ is a $k$-cut containing $e$. Let $E_{\\mu,k,\\lambda} = \\set{e | \\tau_{\\mu,k,e} \\geq \\lambda}$.\nConjecture The number of sets of the form $F\\cap E_{\\mu,k,\\lambda}$ where $F$ is a cut such that $c_{\\mu}(F)\u0026lt; \\alpha \\lambda$ for some $c_\\mu\\geq 0$ is $O(n^{\\ceil{\\alpha k}+d-2})$.\n","date":1579603900,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1579603900,"objectID":"0dced2db4df7f62dae5363a220dab5ca","permalink":"https://shishuai.org/post/2019-11-27-bounds-on-cuts/","publishdate":"2020-01-21T18:51:40+08:00","relpermalink":"/post/2019-11-27-bounds-on-cuts/","section":"post","summary":"Recently there are some advances on counting the number of min-cut in graphs.\nConsider we have an undirected graph $G=(V,E)$ of $n$ vertices, and there are positive cost $c:E\\to \\R^+$ on the edges. We define $c(F)=\\sum_{e\\in F}c(e)$, to be the cost (value) of $F\\subset E$.\nLet $\\mathcal{P}$ be a partition of $V$ where each partition class is non-empty. We define $E(\\mathcal{P})$ to be the set of edges with end points in two different partition classes.","tags":["Graph Theory","test"],"title":"Bounds on number of cuts","type":"post"},{"authors":[],"categories":[],"content":"This problem is a generalization of the word break problem on leetcode. Many algorithms you see online assumes that string in $W$ has constant length, checking the hash table takes $O(1)$ time, and obtain an $O(n^2)$ time algorithm. It is not as easy. Here we show an algorithm that considers the strings in $W$ have arbitrary length.\nConsider the following graph $G=(V,E)$, where $V=\\set{0,\\ldots,n}$, and there is an edge from $i$ and $j$, if $s[i+1..j]=w\\in W$, and the label of the edge $(i,j)$ is the string $w$, and the cost is $c(w)$. Let $z$ be number of substrings in $s$ matches some element in $W$. The graph has $z$ edges. Note $z=O(n\\sqrt{L})$. Indeed, the sum of the length of the labels of all outgoing edges cannot be more than $L$, and the length of each label is different. Hence each vertex can have at most $O(\\sqrt{L})$ outgoing edges. The graph is a DAG, so we can find the shortest path from $0$ to $n$ in linear time with respect to the number of edges. This shows if we can compute the graph in $O(z+L)$ time, then we solve the problem in $O(z+L)$ time.\nWe can build the Aho–Corasick automaton for $W$ in $O(L)$ time. It can be used to find all substrings of $s$ that matches something in $W$ by traversing the automaton once. The running time is the total number of substrings matched, which is $O(z)$. Hence building the graph takes $O(z+L)$ time. $z$ is clearly no more than $nm$, where $m=|W|$. Also, it is also clear $z=O(n\\sqrt{L})$. Indeed, there can be at most $O(\\sqrt{L})$ edges start from $i$, since each edge has a label of different length, and sum of those length labels is no larger than $L$.\nIf we only want to know if there exists a solution, then there is a $\\tilde{O}(nL^{1/3}+L)$ time algorithm [@BringmannGL17]. The algorithm is close to optimal assuming the algorithm is combinatorial and the alphabet can be arbitrarily large.\nCan we obtain similar running time for the word break with cost problem? There are evidence against it. If the alphabet is unary, this problem is equivalent to the unbounded knapsack problem, which likely does not have an algorithm with running time $O((n+L)^{2-\\e})$ for any $\\e\u0026gt;0$ [@CyganMWW19] and $m$ can be as large as $\\Omega(\\sqrt{L})$. Of course, this does not mean there might not be a $O(nL^{1/3}+L)$ time algorithm, since the reduction involved in the paper might not hold when we require $m=\\Omega(\\sqrt{L})$.\n","date":1579603900,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1579603900,"objectID":"be3d5cf9cd6acbc273a36563933ffdd6","permalink":"https://shishuai.org/post/my-first-post/","publishdate":"2020-01-21T18:51:40+08:00","relpermalink":"/post/my-first-post/","section":"post","summary":"This problem is a generalization of the word break problem on leetcode. Many algorithms you see online assumes that string in $W$ has constant length, checking the hash table takes $O(1)$ time, and obtain an $O(n^2)$ time algorithm. It is not as easy. Here we show an algorithm that considers the strings in $W$ have arbitrary length.\nConsider the following graph $G=(V,E)$, where $V=\\set{0,\\ldots,n}$, and there is an edge from $i$ and $j$, if $s[i+1.","tags":[],"title":"My First Post","type":"post"},{"authors":[],"categories":[],"content":"I've read a lot of articles on Traditional vs Roth IRA. One can do a serious mathematical analysis of which one is better, given that you want to invest a total of $x$ income into the account for a particular year. Money in excess of $x$ will be put in a normal investment account.\nThere is a widely held belief that if your effective tax rate is higher today than when you cash out, it is always better to do pre-tax contribution (Traditional IRA). However, we can show this is not always the case. You need effective tax rate to be somewhat lower unless you are in the lowest of tax bracket. Assume for simplicity, you don't have to pay state income tax.\nAssumption you way more than enough money to maximize the contribution.\nHere are the 3 options.\n Type 1: (Traditional IRA, 401(k)) No tax when contributing, taxed as ordinary income afterwards. Type 2: (Roth IRA, Roth 401(k)) Taxed when contributing, and no taxes with withdrawal. Type 3: Normal account, taxed when contributing, and tax with either ordinary income or capital gain taxes depending on type.  Consider the simplest model. You have a stock that you buy and hold. It generates no dividends. At the time when you sell it, it worths $k$ times more. All your money will be going into that stock.\nAssume you allocate $x$ income into $x_1,x_2,x_3$, which is the amount of income allocated into Type $1,2,3$ accounts, respectively.\nHow much after tax income is generated when you sell the stock?\nLet $\\alpha$ be the (approximate) effective tax rate today, $\\alpha'$ is an (approximate) effective tax rate when you sell. $\\beta'$ is the capital gain tax rate.\nThe after-tax income contributed by each account is\n Type 1: $kx_1(1-\\alpha\u0026rsquo;)$ Type 2: $kx_2(1-\\alpha)$ Type 3: $(k-1)x_3(1-\\alpha)(1-\\beta\u0026rsquo;) + x_3(1-\\alpha)$ $= x_3(1-\\alpha)((k-1)(1-\\beta\u0026rsquo;)+1)$  Now, we also have the following constraint. $x_1+x_2(1-\\alpha)=B$, where $B$ is the maximum contribution into type 1 and type 2 accounts. This happens because they share the same bound (this is true for both 401(k) and IRA). Note that $x_1+x_2+x_3=x$. Since $B$ and $x$ are fixed, we have $x_2 = \\frac{B-x_1}{1-\\alpha}$, and $x_3 = x-x_1-\\frac{B-x_1}{1-\\alpha}$\nDefine $f(x_1)=kx_1(1-\\alpha\u0026rsquo;) + k(B-x_1) + $$(x-x_1-\\frac{B-x_1}{1-\\alpha})(1-\\alpha)((k-1)(1-\\beta\u0026rsquo;)+1)$, which is a linear function. We take the derivative of $f$ and obtain the slope if $k(\\alpha-\\alpha\u0026rsquo;)- (k-1)\\alpha\\beta'$. If the slope is positive, it means when should maximize type $1$ account, and if the slope is negative, we should maximize type $2$ account.\nIn order for the inequality to work for all $k\u0026gt;1$, we need $\\alpha-\\alpha\u0026rsquo;\\geq \\alpha\\beta'$. In other words, we need $\\alpha\u0026rsquo;\\leq \\alpha(1-\\beta\u0026rsquo;)$ in order to safely say it is better to maximize type 1.\nWe didn't even consider what happens if there are dividend involved. It would shift the scale even more toward type 2.\nI think the moral of the story is you have to be careful and actually model everything correctly. Also, since there is no way to know the tax rate in the future, some people hedge the risk by putting money in both type 1 and type 2 accounts.\nIt looks like this still suggest putting money in Traditional IRA is better than Roth IRA if your current tax rate is much higher than your future tax rate.\n","date":1579603900,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1579603900,"objectID":"4f281ed2a3cce7c7ad504ef8ec25f0cc","permalink":"https://shishuai.org/post/2019-09-06-traditional-ira-vs-roth-ira/","publishdate":"2020-01-21T18:51:40+08:00","relpermalink":"/post/2019-09-06-traditional-ira-vs-roth-ira/","section":"post","summary":"I've read a lot of articles on Traditional vs Roth IRA. One can do a serious mathematical analysis of which one is better, given that you want to invest a total of $x$ income into the account for a particular year. Money in excess of $x$ will be put in a normal investment account.\nThere is a widely held belief that if your effective tax rate is higher today than when you cash out, it is always better to do pre-tax contribution (Traditional IRA).","tags":["Tax"],"title":"Traditional vs Roth IRA under fixed amount of investment","type":"post"},{"authors":["Shuai Shi"],"categories":[],"content":"This problem is a generalization of the word break problem on leetcode. Many algorithms you see online assumes that string in $W$ has constant length, checking the hash table takes $O(1)$ time, and obtain an $O(n^2)$ time algorithm. It is not as easy. Here we show an algorithm that considers the strings in $W$ have arbitrary length.\nConsider the following graph $G=(V,E)$, where $V=\\set{0,\\ldots,n}$, and there is an edge from $i$ and $j$, if $s[i+1..j]=w\\in W$, and the label of the edge $(i,j)$ is the string $w$, and the cost is $c(w)$. Let $z$ be number of substrings in $s$ matches some element in $W$. The graph has $z$ edges. Note $z=O(n\\sqrt{L})$. Indeed, the sum of the length of the labels of all outgoing edges cannot be more than $L$, and the length of each label is different. Hence each vertex can have at most $O(\\sqrt{L})$ outgoing edges. The graph is a DAG, so we can find the shortest path from $0$ to $n$ in linear time with respect to the number of edges. This shows if we can compute the graph in $O(z+L)$ time, then we solve the problem in $O(z+L)$ time.\nWe can build the Aho–Corasick automaton for $W$ in $O(L)$ time. It can be used to find all substrings of $s$ that matches something in $W$ by traversing the automaton once. The running time is the total number of substrings matched, which is $O(z)$. Hence building the graph takes $O(z+L)$ time. $z$ is clearly no more than $nm$, where $m=|W|$. Also, it is also clear $z=O(n\\sqrt{L})$. Indeed, there can be at most $O(\\sqrt{L})$ edges start from $i$, since each edge has a label of different length, and sum of those length labels is no larger than $L$.\nIf we only want to know if there exists a solution, then there is a $\\tilde{O}(nL^{1/3}+L)$ time algorithm [@BringmannGL17]. The algorithm is close to optimal assuming the algorithm is combinatorial and the alphabet can be arbitrarily large.\nCan we obtain similar running time for the word break with cost problem? There are evidence against it. If the alphabet is unary, this problem is equivalent to the unbounded knapsack problem, which likely does not have an algorithm with running time $O((n+L)^{2-\\e})$ for any $\\e\u0026gt;0$ [@CyganMWW19] and $m$ can be as large as $\\Omega(\\sqrt{L})$. Of course, this does not mean there might not be a $O(nL^{1/3}+L)$ time algorithm, since the reduction involved in the paper might not hold when we require $m=\\Omega(\\sqrt{L})$.\n","date":1579603900,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1579603900,"objectID":"e61e1a869b17998d07a08e2b20c636ec","permalink":"https://shishuai.org/post/2019-09-19-word-break-with-cost/","publishdate":"2020-01-21T18:51:40+08:00","relpermalink":"/post/2019-09-19-word-break-with-cost/","section":"post","summary":"This problem is a generalization of the word break problem on leetcode. Many algorithms you see online assumes that string in $W$ has constant length, checking the hash table takes $O(1)$ time, and obtain an $O(n^2)$ time algorithm. It is not as easy. Here we show an algorithm that considers the strings in $W$ have arbitrary length.\nConsider the following graph $G=(V,E)$, where $V=\\set{0,\\ldots,n}$, and there is an edge from $i$ and $j$, if $s[i+1.","tags":["Graph Theory","Algorithm"],"title":"Word break with cost","type":"post"}]